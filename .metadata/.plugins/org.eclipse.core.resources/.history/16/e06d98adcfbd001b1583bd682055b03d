package util;

import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

import dto.SateliteDto;
import enums.SatelitesEnum;

public class MensajesCifrado {

	private Logger log = Logger.getLogger(this.getClass().getCanonicalName());
	
	private SateliteDto kenobi;
	private SateliteDto skywalker;
	private SateliteDto sato;

	private MensajesCifrado instance;

	private MensajesCifrado() {
		super();
		kenobi = null;
		skywalker = null;
		sato = null;

	}

	public String GetMessage(String... messages) {

		if (Objects.isNull(kenobi)) {
			// el toma kenobi como el primer satelite
			kenobi = SatelitesEnum.KENOBI.getSatelite();
			kenobi.setDistancia(distancia);
			log.log(Level.INFO, "Crear KENOBI {0}", kenobi);
		} else if (Objects.isNull(skywalker)) {
			// se toma skywalker como el segundo
			skywalker = SatelitesEnum.SKYWALKER.getSatelite();
			skywalker.setDistancia(distancia);
			log.log(Level.INFO, "Crear SKYWALKER {0}", skywalker);
		} else if (Objects.isNull(sato)) {
			// se toma sato como el tercero
			sato = SatelitesEnum.SATO.getSatelite();
			sato.setDistancia(distancia);
			log.log(Level.INFO, "Crear SATO {0}", sato);
		} else {
			// si los tres tienen datos, se reinician
			kenobi = SatelitesEnum.KENOBI.getSatelite();
			kenobi.setDistancia(distancia);
			skywalker = null;
			sato = null;
			log.log(Level.INFO, "Reinicia KENOBI {0}", kenobi);
		}
		
		return null;
	}

	/**
	 * Obtiene el mensaje cifrado
	 * 
	 * @param mensajes
	 * @return
	 */
	private String obtenerMensaje(List<String[]> mensajes) {
		String[] listMsj = new String[lengthMaxList(mensajes)];
		String msjCifrado = "";
		for (String[] msj : mensajes) {
			for (int i = 0; i < msj.length; i++) {
				if (!msj[i].equals("")) {
					listMsj[i] = msj[i];
				}
			}
		}
		for (int i = 0; i < listMsj.length; i++) {
			if (Objects.isNull(listMsj[i])) {
				throw new IllegalArgumentException("No se puede determinar el mensaje.");
			} else {
				msjCifrado += (i > 0 ? " " : "") + listMsj[i];
			}

		}

		return msjCifrado;
	}

	/**
	 * 
	 * @param mensajes
	 * @return
	 */
	private static int lengthMaxList(List<String[]> mensajes) {
		int max = 0;

		for (String[] msj : mensajes) {
			if (msj.length > max) {
				max = msj.length;
			}
		}

		return max;
	}

	public MensajesCifrado getInstance() {
		if (Objects.isNull(instance)) {
			instance = new MensajesCifrado();
		}
		return instance;
	}

}
